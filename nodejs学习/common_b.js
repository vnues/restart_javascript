const common_a = require('./common_a.js')
// 只要我引入了这个文件就会先去执行这个文件
console.log(common_a)

// 执行 node common_b.js

// 打印出

// run in common_a.js

// { a: 'common_a.js' }

/*
所有代码都运行在模块作用域，不会污染全局作用域。
模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。
模块加载的顺序，按照其在代码中出现的顺序
*/
/*
这一点与 CommonJS 规范完全不同。CommonJS 模块输出的是值的缓存，不存在动态更新，详见下文《Module 的加载实现》一节。

最后，export命令可以出现在模块的任何位置，只要处于模块顶层就可以。
如果处于块级作用域内，就会报错，下一节的import命令也是如此。这是因为处于条件代码块之中，就没法做静态优化了，违背了 ES6 模块的设计初衷。

*/

// 注意，import命令具有提升效果，会提升到整个模块的头部，首先执行。

/*
最后，import语句会执行所加载的模块，因此可以有下面的写法。

import 'lodash';
上面代码仅仅执行lodash模块，但是不输入任何值。

如果多次重复执行同一句import语句，那么只会执行一次，而不会执行多次。
*/

// import不会有缓存 